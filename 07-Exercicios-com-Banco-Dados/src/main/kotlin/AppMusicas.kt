import javax.swing.JOptionPane
import org.apache.commons.dbcp2.BasicDataSource
import org.springframework.jdbc.core.JdbcTemplate

fun main() {
    val dataSource = BasicDataSource()

    dataSource.driverClassName = "org.h2.Driver"
    dataSource.url = "jdbc:h2:mem:sptech"
    dataSource.username = "sa"
    dataSource.password = ""

    val musica1 = Musica()
    musica1.interprete = JOptionPane.showInputDialog("Qual o artista?")
    musica1.acessosSpotify = JOptionPane.showInputDialog("Quantos acessos ao Spotify?").toInt()

    val musica2 = Musica()
    musica2.interprete = JOptionPane.showInputDialog("Qual o artista?")
    musica2.acessosSpotify = JOptionPane.showInputDialog("Quantos acessos ao Spotify?").toInt()

    JOptionPane.showMessageDialog(null,"A música cantada por ${musica1.interprete} teve ${musica1.acessosSpotify} acessos no Spotify")
    JOptionPane.showMessageDialog(null,"A música cantada por ${musica2.interprete} teve ${musica2.acessosSpotify} acessos no Spotify")

    val confirmaracesso1 = JOptionPane.showInputDialog("O acesso ao spotify foi encerrado?\n Digite 1 para SIM ou qualquer outra coisa para NAO").toInt()

    if (confirmaracesso1 == 1){
        musica1.acessoEncerrado = true
    }

    val confirmaracesso2 = JOptionPane.showInputDialog("O acesso ao spotify foi encerrado?\n Digite 1 para sim ou qualque outra coisa para não").toInt()

    if (confirmaracesso2 == 1){
        musica2.acessoEncerrado = true
    }

    val jdbcTemplate = JdbcTemplate(dataSource)

    jdbcTemplate.execute("""
        create table musica(
        id  INT GENERATED BY DEFAULT AS IDENTITY primary key,
        interprete varchar(20) not null,
        acessosSpotify varchar(20) not null,
        acessoEncerrado boolean not null
        );
        """.trimIndent())

    val linhasAfetadas = jdbcTemplate.update(""" 
        insert into musica (interprete,acessosSpotify,acessoEncerrado) values
        ('${musica1.interprete}',${musica1.acessosSpotify},${musica1.acessoEncerrado}), 
        ('${musica2.interprete}',${musica2.acessosSpotify},${musica2.acessoEncerrado})
        """.trimIndent())
    println("$linhasAfetadas linhas inseridas")

    if (musica1.acessoEncerrado == true){
        JOptionPane.showMessageDialog(null,"A música do intérprete ${musica1.interprete}, possui ${musica2.acessosSpotify} acessos no Spotify. Ela já teve o acesso encerrado na plataforma")

    }else{

        JOptionPane.showMessageDialog(null,"A música do intérprete ${musica1.interprete}, possui ${musica2.acessosSpotify} acessos no Spotify. Ela ainda não teve o acesso encerrado na plataforma")
    }

    if (musica2.acessoEncerrado == true){

        JOptionPane.showMessageDialog(null,"A música do intérprete ${musica1.interprete}, possui ${musica2.acessosSpotify} acessos no Spotify. Ela já teve o acesso encerrado na plataforma")

    }else{
        JOptionPane.showMessageDialog(null,"A música do intérprete ${musica1.interprete}, possui ${musica2.acessosSpotify} acessos no Spotify. Ela ainda não teve o acesso encerrado na plataforma")

    }
    val musicas = jdbcTemplate.queryForList("select*from musica")
    println(musicas)

    val linhasExcluidas = jdbcTemplate.update(""" 
        TRUNCATE TABLE musica 
        """.trimIndent())

    println("$linhasExcluidas afetadas")

}


